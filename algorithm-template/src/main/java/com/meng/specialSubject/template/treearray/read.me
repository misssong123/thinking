针对不同的题目，我们有不同的方案可以选择（假设我们有一个数组）：
1.数组不变，求区间和：「前缀和」、「树状数组」、「线段树」
2.多次修改某个数（单点），求区间和：「树状数组」、「线段树」
3.多次修改某个区间，输出最终结果：「差分」
4.多次修改某个区间，求区间和：「线段树」、「树状数组」（看修改区间范围大小）
5.多次将某个区间变成同一个数，求区间和：「线段树」、「树状数组」（看修改区间范围大小）
这样看来，「线段树」能解决的问题是最多的，那我们是不是无论什么情况都写「线段树」呢？
答案并不是，而且恰好相反，只有在我们遇到第 4 类问题，不得不写「线段树」的时候，我们才考虑线段树。
因为「线段树」代码很长，而且常数很大，实际表现不算很好。我们只有在不得不用的时候才考虑「线段树」。
总结一下，我们应该按这样的优先级进行考虑：
简单求区间和，用「前缀和」
多次将某个区间变成同一个数，用「线段树」
其他情况，用「树状数组」
树状数组
本题显然属于第 2 类问题：多次修改某个数，求区间和。

我们使用「树状数组」进行求解。

「树状数组」本身是一个很简单的数据结构，但是要搞懂其为什么可以这样「查询」&「更新」还是比较困难的（特别是为什么可以这样更新），往往需要从「二进制分解」进行出发理解。

因此我这里直接提供「树状数组」的代码，大家可以直接当做模板背过即可。
