1.Q001Knapsack01 01背包问题
2.Q002CanPartition  分割等和子集(01背包实际应用-间接求解和直接求解)
3.Q003KnapsackComplete   完全背包问题
4.Q004NumSquares 完全背包问题

01背包和完全背包问题的总结:
    01 背包问题的状态转移方程为：dp[i][j] = max(dp[i-1][j],dp[i-1][j-v[i]]+w[i])
由于计算dp[i][j]的时候，依赖于dp[i-1][j] 。因此我们在改为「一维空间优化」时，需要确保dp[j-v[i]]
存储的是上一行的值，即确保dp[j-v[i]]还没有被更新，所以遍历方向是从大到小。
    完全背包问题的状态转移方程是：dp[i][j] = max(dp[i-1][j],dp[i][j-v[i]]+w[i])
由于计算 dp[i][j] 的时候，依赖于dp[i][j-v[i]] 。因此我们在改为「一维空间优化」时，需要确保dp[i][j-v[i]]
 存储的是当前行的值，即确保 dp[i][j-v[i]] 已经被更新，所以遍历方向是从小到大。
两者本质的不同在于进行状态转移时依赖了不同的格子：
01 背包依赖的是「上一行正上方的格子」和「上一行左边的格子」。
完全背包依赖的是「上一行正上方的格子」和「本行左边的格子」。

